@model IEnumerable<ERA_BMS.Models.Bridge>

<br />
@{
    string textColor = "text-success";
    if (ViewBag.StatusMessage.Contains("error"))
    {
        textColor = "text-danger";
    }
}

<p id="statusmessage" class="@textColor" style="font-size: 15px">@ViewBag.StatusMessage</p>

<div class="panel panel-primary">
    <div class="panel-heading">
        <h3 class="panel-title panel-info"><b>Modify</b> Bridge Information (Segment: <b>@ViewBag.SegmentName</b>, Section: <b>@ViewBag.SectionName</b>, District: <b>@ViewBag.DistrictName</b>)</h3>
    </div>

    <div class="panel-body">
        <table class="table table-striped table-condensed table-responsive display compact hover centeredtable" id="bridges">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.BridgeNo)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.RevisedBridgeNo)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.BridgeName)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Segment.SegmentName)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.SubRoute.SubRouteName)
                    </th>
                    <th>Edit</th>
                    <th>Inventory</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            <span class="BridgeNo" name="@item.BridgeId">@item.BridgeNo</span>
                        </td>
                        <td>
                            <span class="RevisedBridgeNo" name="@item.BridgeId">@item.RevisedBridgeNo</span>
                        </td>
                        <td>
                            <span class="BridgeName" name="@item.BridgeId">@item.BridgeName</span>
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Segment.SegmentName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.SubRoute.SubRouteName)
                        </td>
                        <td>
                            @if (User.IsInRole("Admin"))
                            {
                                @Html.ActionLink(" ", "Edit", new { id = item.BridgeId }, new { @class = "glyphicon glyphicon-edit", @data_toggle = "tooltip", title = "Edit" })
                            }
                        </td>
                        <td align="center">
                            <a href="@Url.Action("Index", "BridgeInventory", new { id = item.BridgeId })" target="_blank" class="glyphicon glyphicon-new-window" data-toggle="tooltip" title="Go to Inventory" style="font-size: 14px"></a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="panel-footer">
        <h3 class="panel-title">Total No. of Bridges: <b>@Model.Count()</b></h3>
    </div>
</div>

<script>
    $(document).ready(function () {
        makeBridgeNoEditable();
        makeNewBridgeIdEditable();
        makeBridgeNameEditable();

        $('#bridges').dataTable({
            paging: true,
            pageLength: 15,
            bLengthChange: true,
            scrollY: 400,

            searching: true,
            select: true,
            dom: 'lBfrtip',
            //order: [[1, "asc"]] // sort by the second column (BridgeNo)
            buttons: [
                { extend: 'copy', className: 'btn btn-sm btn-primary' },
                { extend: 'excel', className: 'btn btn-sm btn-primary', text: 'Export Excel' },
                { extend: 'pdf', className: 'btn btn-sm btn-primary', text: 'Export PDF' },
                { extend: 'print', className: 'btn btn-sm btn-primary' }
            ]
        });

        // A function that makes "BridgeNo" editable
        function makeBridgeNoEditable() {
            $(".BridgeNo").each(function () {
                $(this).editable("/Bridges/UpdateBridgeNo", {
                    callback: function (value, settings) {
                        var obj = JSON.parse(value);
                        $(this).html(obj.value);

                        var msg = obj.Message;

                        $('#statusmessage').removeClass("text-success");
                        $('#statusmessage').removeClass("text-danger");
                        if (msg.toLowerCase().includes("error"))
                            $('#statusmessage').addClass("text-danger");
                        else
                            $('#statusmessage').addClass("text-success");
                        $('#statusmessage').text(obj.Message);
                    },
                    submitdata: function () {
                        return {
                            // Pass parameters to "UpdateBridgeNo" action in "Bridges" controller action
                            id: $(this).attr("name"),
                            origvalue: this.revert,
                        };
                    },
                    before: function () {
                        // clear the status message
                        $('#statusmessage').text("");
                    },
                    before: function () {
                        // clear the status message
                        $('#statusmessage').text("");
                    },
                    tooltip: 'Click or Tap to edit...',
                    placeholder: '-',
                    indicator: 'Saving...',
                    label: "** Be careful!",
                    cssclass: "redtextbox",
                    size: 15
                });
            });
        }

        // A function that makes "RevisedBridgeNo" editable
        function makeNewBridgeIdEditable() {
            $(".RevisedBridgeNo").each(function () {
                $(this).editable("/Bridges/UpdateNewBridgeId", {
                    callback: function (value, settings) {
                        var obj = JSON.parse(value);
                        $(this).html(obj.value);

                        var msg = obj.Message;

                        $('#statusmessage').removeClass("text-success");
                        $('#statusmessage').removeClass("text-danger");
                        if (msg.toLowerCase().includes("error"))
                            $('#statusmessage').addClass("text-danger");
                        else
                            $('#statusmessage').addClass("text-success");
                        $('#statusmessage').text(obj.Message);
                    },
                    submitdata: function () {
                        return {
                            // Pass parameters to "UpdateNewBridgeId" action in "Bridges" controller action
                            id: $(this).attr("name"),
                            origvalue: this.revert,
                        };
                    },
                    before: function () {
                        // clear the status message
                        $('#statusmessage').text("");
                    },
                    before: function () {
                        // clear the status message
                        $('#statusmessage').text("");
                    },
                    tooltip: 'Click or Tap to edit...',
                    placeholder: '-',
                    indicator: 'Saving...',
                    label: "** Be careful!",
                    cssclass: "redtextbox",
                    size: 15
                });
            });
        }

        // A function that makes "BridgeName" editable
        function makeBridgeNameEditable() {
            $(".BridgeName").each(function () {
                $(this).editable("/Bridges/UpdateBridgeName", {
                    callback: function (value, settings) {
                        var obj = JSON.parse(value);
                        $(this).html(obj.value);

                        var msg = obj.Message;

                        $('#statusmessage').removeClass("text-success");
                        $('#statusmessage').removeClass("text-danger");
                        if (msg.toLowerCase().includes("error"))
                            $('#statusmessage').addClass("text-danger");
                        else
                            $('#statusmessage').addClass("text-success");
                        $('#statusmessage').text(obj.Message);
                    },
                    submitdata: function () {
                        return {
                            // Pass parameters to "UpdateBridgeName" action in "Bridges" controller action
                            id: $(this).attr("name"),
                            origvalue: this.revert,
                        };
                    },
                    before: function () {
                        // clear the status message
                        $('#statusmessage').text("");
                    },
                    tooltip: 'Click or Tap to edit...',
                    placeholder: '-',
                    indicator: 'Saving...',
                    size: 30
                });
            });
        }
    });
</script>

