@using ERA_BMS.Models
@using ERA_BMS.ViewModels
@using Newtonsoft.Json

@{
    ViewBag.Title = "Abandoned Bridges";
}

<h2>Abandoned Bridges</h2>


<div class="panel panel-primary">
    <div class="panel-heading">
        <h3 class="panel-title panel-info">List of <b>Abandoned</b> and <b>New</b> Bridges (District: <b>All</b>)</h3>
    </div>

    <div class="panel-body">
        <table class="table table-striped table-condensed table-responsive table-bordered display compact hover" id="bridges">
            <thead>
                <tr>
                    <th>
                        @*@Html.DisplayNameFor(model => model.BridgeNo)*@
                        BridgeNo
                    </th>
                    <th>
                        @*@Html.DisplayNameFor(model => model.BridgeName)*@
                        BridgeName
                    </th>
                    <th>
                        @*@Html.DisplayNameFor(model => model.Segment.Section.District.DistrictName)*@
                        District
                    </th>
                    <th>
                        @*@Html.DisplayNameFor(model => model.Segment.Section.SectionName)*@
                        Section
                    </th>
                    <th>
                        @*@Html.DisplayNameFor(model => model.Segment.SegmentName)*@
                        Segment
                    </th>
                    <th>
                        Dist. (Km)
                    </th>
                    <th>
                        Latitude
                    </th>
                    <th>
                        Longitude
                    </th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>

            <tbody>
                @{ 
                    List<Bridge> BridgeList = ViewBag.BridgeList;

                }
                @foreach (var item in BridgeList)
                {
                    string bgcolor = "";
                    if (item.BridgeNo.Contains("N"))
                    {
                        bgcolor = "yellow";
                    }

                    <tr>
                        <td style="background-color: @bgcolor">
                            @Html.DisplayFor(modelItem => item.BridgeNo)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.BridgeName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Segment.Section.District.DistrictName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Segment.Section.SectionName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Segment.SegmentName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.BridgeGeneralInfo.KMFromAddis)
                        </td>

                        <td>
                            @Html.DisplayFor(modelItem => item.BridgeGeneralInfo.LatitudeDMS)
                        </td>

                        <td>
                            @Html.DisplayFor(modelItem => item.BridgeGeneralInfo.LongitudeDMS)
                        </td>

                        <td align="center">
                            <a href="@Url.Action("Index", "BridgeInventory", new { id = item.BridgeId })" target="_blank" class="glyphicon glyphicon-new-window" data-toggle="tooltip" title="Go to Inventory" style="font-size: 14px"></a>
                        </td>
                        <td align="center">
                            <a href="@Url.Action("Index", "BridgeProfile", new { id = item.BridgeId })" target="_blank" class="glyphicon glyphicon-new-window" data-toggle="tooltip" title="Go to Profile" style="font-size: 14px"></a>
                        </td>
                        <td align="center">
                            <a href="@Url.Action("Index", "DamageInspMajor", new { id = item.BridgeId })" target="_blank" class="glyphicon glyphicon-new-window" data-toggle="tooltip" title="Go to Inspection" style="font-size: 14px"></a>
                        </td>

                        @{
                            AbandonedBridgeViewModel brgList = new AbandonedBridgeViewModel();

                            if (item.BridgeNo.Contains("N"))
                            {
                                int index = item.BridgeNo.LastIndexOf("N"); // Find the index of letter "N" is found
                                string brgNo = item.BridgeNo.Substring(0, index); // Truncate all characters starting from "N"
                                brgList.AbandonedBridgeNo = brgNo;
                                brgList.NewBridgeNos = new List<string>();

                                foreach (var brg in BridgeList)
                                {
                                    if (brg.BridgeNo.StartsWith(brgNo) && brg.BridgeNo.Contains("N"))
                                    {
                                        brgList.NewBridgeNos.Add(brg.BridgeNo);
                                    }
                                }
                            }
                            else
                            {
                                brgList.AbandonedBridgeNo = item.BridgeNo;
                                brgList.NewBridgeNos = new List<string>();

                                foreach (var brg in BridgeList)
                                {
                                    if (brg.BridgeNo.StartsWith(item.BridgeNo) && brg.BridgeNo.Contains("N"))
                                    {
                                        brgList.NewBridgeNos.Add(brg.BridgeNo);
                                    }
                                }
                            }
                            <td align="center">
                                @*<a href="@Url.Action("AbandonedBridgesMap", "BridgeLocation", new { bridgeListString = JsonConvert.SerializeObject(brgList, Formatting.None, new JsonSerializerSettings() { ReferenceLoopHandling = ReferenceLoopHandling.Ignore}) } )" target="_blank" class="glyphicon glyphicon-map-marker" data-toggle="tooltip" title="Go to Map" style="font-size: large"></a>*@
                                <a href="@Url.Action("AbandonedBridgesMap", "BridgeLocation", new { bridgeListString = JsonConvert.SerializeObject(brgList) } )" target="_blank" class="glyphicon glyphicon-map-marker" data-toggle="tooltip" title="Go to Map" style="font-size: large"></a>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="panel-footer">
        @{
            int newBridges = BridgeList.Where(s => s.BridgeNo.EndsWith("N")).Count();
            int abandonedBridges = BridgeList.Count() - newBridges;
        }
        <h3 class="panel-title">
            No. of Abandoned Bridges: <b>@abandonedBridges</b> | No. of New Bridges: <b>@newBridges</b> |
            No. of Missing Abandoned Bridges: <b>@ViewBag.NoOfMissingAbandonedBridges</b>
        </h3>
    </div>
</div>

<script>
    $(document).ready(function () {


        $('#bridges').dataTable({
            paging: true,
            pageLength: 15,
            bLengthChange: true,
            scrollY: 400,
            
            searching: true,
            select: true,
            dom: 'lBfrtip',
            //buttons: ['copy', 'excel', 'pdf', 'print']
            buttons: [
                { extend: 'copy', className: 'btn btn-sm btn-primary' },
                { extend: 'excel', className: 'btn btn-sm btn-primary', text: 'Export Excel' },
                { extend: 'pdf', className: 'btn btn-sm btn-primary', text: 'Export PDF' },
                { extend: 'print', className: 'btn btn-sm btn-primary' }
            ]
        });
    });
</script>


