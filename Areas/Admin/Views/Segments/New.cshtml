@model ERA_BMS.Models.Segment

@{
    ViewBag.Title = "New Road Segment";
}

<h2>Register New Road Segment</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @*Holds a unique segment id*@
        @Html.HiddenFor(model => model.SegmentId)

        <div class="row">
            <div class="col-xs-6">
                <div class="form-group form-group-sm required">
                    @Html.LabelFor(model => model.SegmentNo, htmlAttributes: new { @class = "control-label col-md-5" })
                    <div class="col-md-7">
                        @Html.EditorFor(model => model.SegmentNo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SegmentNo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group form-group-sm">
                    @Html.LabelFor(model => model.RoadId, htmlAttributes: new { @class = "control-label col-md-5" })
                    <div class="col-md-7">
                        @Html.EditorFor(model => model.RoadId, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.RoadId, "", new { style = "color: red" })
                    </div>
                </div>

                <div class="form-group form-group-sm">
                    @Html.LabelFor(model => model.RevisedRoadId, htmlAttributes: new { @class = "control-label col-md-5" })
                    <div class="col-md-7">
                        @Html.EditorFor(model => model.RevisedRoadId, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.RevisedRoadId, "", new { style = "color: red" })
                    </div>
                </div>

                <div class="form-group form-group-sm required">
                    @Html.LabelFor(model => model.SegmentName, htmlAttributes: new { @class = "control-label col-md-5" })
                    <div class="col-md-7">
                        @Html.EditorFor(model => model.SegmentName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SegmentName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group form-group-sm required">
                    <label for="DistrictId" class="control-label col-md-5">District</label>
                    <div class="col-md-7">
                        @*@Html.DropDownList("DistrictId", ViewBag.Districts as SelectList, htmlAttributes: new { @class = "form-control" })*@
                        @Html.DropDownList("DistrictId", new SelectList(ViewBag.Districts, "Value", "Text", ViewBag.DistrictId), new { @class = "form-control" })
                        @*@Html.ValidationMessageFor("District", "", new { @class = "text-danger" })*@
                    </div>
                </div>

                <div class="form-group form-group-sm required">
                    @Html.LabelFor(model => model.SectionId, "Section", htmlAttributes: new { @class = "control-label col-md-5" })
                    <div class="col-md-7">
                        @Html.DropDownList("SectionId", new SelectList(ViewBag.Sections, "Value", "Text", ViewBag.SectionId), htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.SectionId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group form-group-sm">
                    @Html.LabelFor(model => model.ConstructionYear, htmlAttributes: new { @class = "control-label col-md-5" })
                    <div class="col-md-7">
                        @Html.EditorFor(model => model.ConstructionYear, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ConstructionYear, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-xs-6">
                <div class="form-group form-group-sm">
                    @Html.LabelFor(model => model.AsphaltLength, htmlAttributes: new { @class = "control-label col-sm-4" })
                    <div class="col-sm-8">
                        @Html.EditorFor(model => model.AsphaltLength, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.AsphaltLength, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group form-group-sm">
                    @Html.LabelFor(model => model.GravelLength, htmlAttributes: new { @class = "control-label col-sm-4" })
                    <div class="col-sm-8">
                        @Html.EditorFor(model => model.GravelLength, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.GravelLength, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group form-group-sm">
                    @Html.LabelFor(model => model.Length, htmlAttributes: new { @class = "control-label col-sm-4" })
                    <div class="col-sm-8">
                        @Html.EditorFor(model => model.Length, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Length, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group form-group-sm">
                    @Html.LabelFor(model => model.Width, htmlAttributes: new { @class = "control-label col-sm-4" })
                    <div class="col-sm-8">
                        @Html.EditorFor(model => model.Width, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Width, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group form-group-sm">
                    @Html.LabelFor(model => model.RoadClassId, htmlAttributes: new { @class = "control-label col-sm-4" })
                    <div class="col-sm-8">
                        @Html.DropDownList("RoadClassId", new SelectList(ViewBag.RoadClassId, "Value", "Text"), htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.RoadClassId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group form-group-sm">
                    @Html.LabelFor(model => model.DesignStandardId, htmlAttributes: new { @class = "control-label col-sm-4" })
                    <div class="col-sm-8">
                        @*@Html.DropDownList("DesignStandardId", null, htmlAttributes: new { @class = "form-control" })*@
                        @Html.DropDownList("DesignStandardId", new SelectList(ViewBag.DesignStandardId, "Value", "Text"), htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.DesignStandardId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group form-group-sm">
                    @Html.LabelFor(model => model.RoadSurfaceTypeId, htmlAttributes: new { @class = "control-label col-sm-4" })
                    <div class="col-sm-8">
                        @*@Html.DropDownList("SurfaceTypeId", null, htmlAttributes: new { @class = "form-control" })*@
                        @Html.DropDownList("SurfaceTypeId", new SelectList(ViewBag.RoadSurfaceTypeId, "Value", "Text"), htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.RoadSurfaceTypeId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group form-group-sm">
                    @Html.LabelFor(model => model.AverageDailyTraffic, htmlAttributes: new { @class = "control-label col-sm-4" })
                    <div class="col-sm-8">
                        @Html.EditorFor(model => model.AverageDailyTraffic, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.AverageDailyTraffic, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group form-group-sm">
                    @Html.LabelFor(model => model.RegionalGovernmentId, htmlAttributes: new { @class = "control-label col-sm-4" })
                    <div class="col-sm-8">
                        @*@Html.DropDownList("RegionalGovernmentId", null, htmlAttributes: new { @class = "form-control" })*@
                        @Html.DropDownList("RegionalGovernmentId", new SelectList(ViewBag.RegionalGovernmentId, "Value", "Text"), htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.RegionalGovernmentId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group form-group-sm">
                    @Html.LabelFor(model => model.Remark, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-7">
                        @Html.EditorFor(model => model.Remark, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group form-group-sm form-group-sm">
            <div class="col-md-offset-2 col-md-10">
                <button type="submit" class="btn btn-primary" id="save"><span class="glyphicon glyphicon-save"></span> Save</button>
                <button type="reset" class="btn btn-primary"><span class="glyphicon glyphicon-refresh"></span> Reset</button>
                <div id="status" class="text-danger">
                    <!-- Save failure status text appears here-->
                </div>
            </div>
        </div>
    </div>
}

<div>
    <a href="@Url.Action("Index", new { id = (ViewContext.RouteData.Values["id"]) })" class="btn btn-primary"><span class="glyphicon glyphicon-backward"></span> Go to Segments List</a>
</div>

<script>
    $(document).ready(function () {
        // Assign a segment id which is the next sequence in the segment table
        $.ajax({
            url: '@Url.Action("LastSegmentId", "Segments", new { area = "Admin" })',
            type: 'GET',
            dataType: 'json',
            success: function (data) {
                $.each(data, function (i, item) {
                    $('#SegmentId').val(item.SegmentId); // set the segment id
                });
            },
        });

        $('#DistrictId').change(function () {
            var selDistrictId = $('#DistrictId option:selected').val();
            $('#SectionId option').remove(); //empty the section dropdown list

            if (selDistrictId != "0") //if some district is selected
            {
                $.ajax({
                    url: '@Url.Action("_GetSections", "LocationsDDL", new { area = "" })',
                    data: { districtid: selDistrictId },
                    type: 'GET',
                    dataType: 'json',
                    success: function (data) {
                        var markup = '<option value="0" id="noselect"> --Select Section --</option>';
                        $.each(data, function (i, section) {
                            markup += '<option value="' + section.Value + '">' + section.Text + '</option>'
                            $('#SectionId').html(markup);
                        });
                    }
                });
            }
        });

        $('#save').click(function () {
            var selSectionId = $('#SectionId').val();

            // if no section is selected, cancel submission and show error status
            if (selSectionId == 0 || (typeof selSectionId == 'undefined') || selSectionId == null || selSubRouteId == null) {
                $('#status').text("Please select all boxes marked with *");
                return false;
            }
        });
    });
</script>
